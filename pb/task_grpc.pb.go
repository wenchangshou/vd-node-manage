// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TaskManagementClient is the client API for TaskManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskManagementClient interface {
	GetTaskByComputerMac(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*TasksResponse, error)
	SetTaskStatus(ctx context.Context, in *SetTaskStatusRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
}

type taskManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskManagementClient(cc grpc.ClientConnInterface) TaskManagementClient {
	return &taskManagementClient{cc}
}

func (c *taskManagementClient) GetTaskByComputerMac(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*TasksResponse, error) {
	out := new(TasksResponse)
	err := c.cc.Invoke(ctx, "/TaskManagement/getTaskByComputerMac", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagementClient) SetTaskStatus(ctx context.Context, in *SetTaskStatusRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, "/TaskManagement/setTaskStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskManagementServer is the server API for TaskManagement service.
// All implementations must embed UnimplementedTaskManagementServer
// for forward compatibility
type TaskManagementServer interface {
	GetTaskByComputerMac(context.Context, *GetTaskRequest) (*TasksResponse, error)
	SetTaskStatus(context.Context, *SetTaskStatusRequest) (*wrapperspb.BoolValue, error)
	mustEmbedUnimplementedTaskManagementServer()
}

// UnimplementedTaskManagementServer must be embedded to have forward compatible implementations.
type UnimplementedTaskManagementServer struct {
}

func (UnimplementedTaskManagementServer) GetTaskByComputerMac(context.Context, *GetTaskRequest) (*TasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskByComputerMac not implemented")
}
func (UnimplementedTaskManagementServer) SetTaskStatus(context.Context, *SetTaskStatusRequest) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTaskStatus not implemented")
}
func (UnimplementedTaskManagementServer) mustEmbedUnimplementedTaskManagementServer() {}

// UnsafeTaskManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskManagementServer will
// result in compilation errors.
type UnsafeTaskManagementServer interface {
	mustEmbedUnimplementedTaskManagementServer()
}

func RegisterTaskManagementServer(s grpc.ServiceRegistrar, srv TaskManagementServer) {
	s.RegisterService(&TaskManagement_ServiceDesc, srv)
}

func _TaskManagement_GetTaskByComputerMac_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagementServer).GetTaskByComputerMac(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TaskManagement/getTaskByComputerMac",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagementServer).GetTaskByComputerMac(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManagement_SetTaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTaskStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagementServer).SetTaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TaskManagement/setTaskStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagementServer).SetTaskStatus(ctx, req.(*SetTaskStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskManagement_ServiceDesc is the grpc.ServiceDesc for TaskManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TaskManagement",
	HandlerType: (*TaskManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getTaskByComputerMac",
			Handler:    _TaskManagement_GetTaskByComputerMac_Handler,
		},
		{
			MethodName: "setTaskStatus",
			Handler:    _TaskManagement_SetTaskStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/task.proto",
}
