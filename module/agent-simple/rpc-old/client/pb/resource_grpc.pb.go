// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ResourceManagementClient is the client API for ResourceManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceManagementClient interface {
	GetResourceDetailedInfo(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*GetResourceDetailedInfoResponse, error)
}

type resourceManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceManagementClient(cc grpc.ClientConnInterface) ResourceManagementClient {
	return &resourceManagementClient{cc}
}

func (c *resourceManagementClient) GetResourceDetailedInfo(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*GetResourceDetailedInfoResponse, error) {
	out := new(GetResourceDetailedInfoResponse)
	err := c.cc.Invoke(ctx, "/ResourceManagement/GetResourceDetailedInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceManagementServer is the server API for ResourceManagement service.
// All implementations must embed UnimplementedResourceManagementServer
// for forward compatibility
type ResourceManagementServer interface {
	GetResourceDetailedInfo(context.Context, *wrapperspb.StringValue) (*GetResourceDetailedInfoResponse, error)
	mustEmbedUnimplementedResourceManagementServer()
}

// UnimplementedResourceManagementServer must be embedded to have forward compatible implementations.
type UnimplementedResourceManagementServer struct {
}

func (UnimplementedResourceManagementServer) GetResourceDetailedInfo(context.Context, *wrapperspb.StringValue) (*GetResourceDetailedInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceDetailedInfo not implemented")
}
func (UnimplementedResourceManagementServer) mustEmbedUnimplementedResourceManagementServer() {}

// UnsafeResourceManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceManagementServer will
// result in compilation errors.
type UnsafeResourceManagementServer interface {
	mustEmbedUnimplementedResourceManagementServer()
}

func RegisterResourceManagementServer(s grpc.ServiceRegistrar, srv ResourceManagementServer) {
	s.RegisterService(&ResourceManagement_ServiceDesc, srv)
}

func _ResourceManagement_GetResourceDetailedInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagementServer).GetResourceDetailedInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ResourceManagement/GetResourceDetailedInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagementServer).GetResourceDetailedInfo(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

// ResourceManagement_ServiceDesc is the grpc.ServiceDesc for ResourceManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourceManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ResourceManagement",
	HandlerType: (*ResourceManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetResourceDetailedInfo",
			Handler:    _ResourceManagement_GetResourceDetailedInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc-old/server/pb/resource.proto",
}
