// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package playerRpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RpcCallClient is the client API for RpcCall service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RpcCallClient interface {
	Call(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*RpcResponse, error)
	Close(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*SimpleResponse, error)
	Ping(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*SimpleResponse, error)
}

type rpcCallClient struct {
	cc grpc.ClientConnInterface
}

func NewRpcCallClient(cc grpc.ClientConnInterface) RpcCallClient {
	return &rpcCallClient{cc}
}

func (c *rpcCallClient) Call(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, "/control.RpcCall/Call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcCallClient) Close(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/control.RpcCall/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcCallClient) Ping(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/control.RpcCall/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RpcCallServer is the server API for RpcCall service.
// All implementations must embed UnimplementedRpcCallServer
// for forward compatibility
type RpcCallServer interface {
	Call(context.Context, *RpcRequest) (*RpcResponse, error)
	Close(context.Context, *EmptyMessage) (*SimpleResponse, error)
	Ping(context.Context, *EmptyMessage) (*SimpleResponse, error)
	mustEmbedUnimplementedRpcCallServer()
}

// UnimplementedRpcCallServer must be embedded to have forward compatible implementations.
type UnimplementedRpcCallServer struct {
}

func (UnimplementedRpcCallServer) Call(context.Context, *RpcRequest) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (UnimplementedRpcCallServer) Close(context.Context, *EmptyMessage) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (UnimplementedRpcCallServer) Ping(context.Context, *EmptyMessage) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedRpcCallServer) mustEmbedUnimplementedRpcCallServer() {}

// UnsafeRpcCallServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RpcCallServer will
// result in compilation errors.
type UnsafeRpcCallServer interface {
	mustEmbedUnimplementedRpcCallServer()
}

func RegisterRpcCallServer(s grpc.ServiceRegistrar, srv RpcCallServer) {
	s.RegisterService(&RpcCall_ServiceDesc, srv)
}

func _RpcCall_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcCallServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/control.RpcCall/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcCallServer).Call(ctx, req.(*RpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcCall_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcCallServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/control.RpcCall/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcCallServer).Close(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcCall_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcCallServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/control.RpcCall/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcCallServer).Ping(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// RpcCall_ServiceDesc is the grpc.ServiceDesc for RpcCall service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RpcCall_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "control.RpcCall",
	HandlerType: (*RpcCallServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Call",
			Handler:    _RpcCall_Call_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _RpcCall_Close_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _RpcCall_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/control.proto",
}
