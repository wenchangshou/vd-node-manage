// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileManagementClient is the client API for FileManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileManagementClient interface {
	GetFileInfoByProjectReleaseID(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*GetFileInfoByProjectReleaseIDResponse, error)
}

type fileManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewFileManagementClient(cc grpc.ClientConnInterface) FileManagementClient {
	return &fileManagementClient{cc}
}

func (c *fileManagementClient) GetFileInfoByProjectReleaseID(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*GetFileInfoByProjectReleaseIDResponse, error) {
	out := new(GetFileInfoByProjectReleaseIDResponse)
	err := c.cc.Invoke(ctx, "/pb.FileManagement/getFileInfoByProjectReleaseID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileManagementServer is the server API for FileManagement service.
// All implementations must embed UnimplementedFileManagementServer
// for forward compatibility
type FileManagementServer interface {
	GetFileInfoByProjectReleaseID(context.Context, *wrapperspb.StringValue) (*GetFileInfoByProjectReleaseIDResponse, error)
	mustEmbedUnimplementedFileManagementServer()
}

// UnimplementedFileManagementServer must be embedded to have forward compatible implementations.
type UnimplementedFileManagementServer struct {
}

func (UnimplementedFileManagementServer) GetFileInfoByProjectReleaseID(context.Context, *wrapperspb.StringValue) (*GetFileInfoByProjectReleaseIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileInfoByProjectReleaseID not implemented")
}
func (UnimplementedFileManagementServer) mustEmbedUnimplementedFileManagementServer() {}

// UnsafeFileManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileManagementServer will
// result in compilation errors.
type UnsafeFileManagementServer interface {
	mustEmbedUnimplementedFileManagementServer()
}

func RegisterFileManagementServer(s grpc.ServiceRegistrar, srv FileManagementServer) {
	s.RegisterService(&FileManagement_ServiceDesc, srv)
}

func _FileManagement_GetFileInfoByProjectReleaseID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagementServer).GetFileInfoByProjectReleaseID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FileManagement/getFileInfoByProjectReleaseID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagementServer).GetFileInfoByProjectReleaseID(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

// FileManagement_ServiceDesc is the grpc.ServiceDesc for FileManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.FileManagement",
	HandlerType: (*FileManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getFileInfoByProjectReleaseID",
			Handler:    _FileManagement_GetFileInfoByProjectReleaseID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/server/pb/file.proto",
}
