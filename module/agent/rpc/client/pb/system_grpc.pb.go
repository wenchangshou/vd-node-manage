// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SystemManagementClient is the client API for SystemManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SystemManagementClient interface {
	ReportServerinfo(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportResponse, error)
}

type systemManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemManagementClient(cc grpc.ClientConnInterface) SystemManagementClient {
	return &systemManagementClient{cc}
}

func (c *systemManagementClient) ReportServerinfo(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportResponse, error) {
	out := new(ReportResponse)
	err := c.cc.Invoke(ctx, "/SystemManagement/ReportServerinfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemManagementServer is the server API for SystemManagement service.
// All implementations must embed UnimplementedSystemManagementServer
// for forward compatibility
type SystemManagementServer interface {
	ReportServerinfo(context.Context, *ReportRequest) (*ReportResponse, error)
	mustEmbedUnimplementedSystemManagementServer()
}

// UnimplementedSystemManagementServer must be embedded to have forward compatible implementations.
type UnimplementedSystemManagementServer struct {
}

func (UnimplementedSystemManagementServer) ReportServerinfo(context.Context, *ReportRequest) (*ReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportServerinfo not implemented")
}
func (UnimplementedSystemManagementServer) mustEmbedUnimplementedSystemManagementServer() {}

// UnsafeSystemManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemManagementServer will
// result in compilation errors.
type UnsafeSystemManagementServer interface {
	mustEmbedUnimplementedSystemManagementServer()
}

func RegisterSystemManagementServer(s grpc.ServiceRegistrar, srv SystemManagementServer) {
	s.RegisterService(&SystemManagement_ServiceDesc, srv)
}

func _SystemManagement_ReportServerinfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemManagementServer).ReportServerinfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SystemManagement/ReportServerinfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemManagementServer).ReportServerinfo(ctx, req.(*ReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SystemManagement_ServiceDesc is the grpc.ServiceDesc for SystemManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SystemManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SystemManagement",
	HandlerType: (*SystemManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportServerinfo",
			Handler:    _SystemManagement_ReportServerinfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/server/pb/system.proto",
}
