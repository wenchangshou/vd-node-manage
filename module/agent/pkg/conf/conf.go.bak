package conf

import (
	"errors"
	"github.com/go-ini/ini"
	"github.com/go-playground/validator/v10"
	"github.com/google/uuid"
	"github.com/wenchangshou2/vd-node-manage/common/util"
	"github.com/wenchangshou2/zutil"
)

type system struct {
	Init       bool
	HashIDSalt string
	Mode       string
	Ip         string
	Port       uint
	Debug      bool
}

// Server 服务配置
type Server struct {
	Address string
}

// database 数据库
type database struct {
	Type        string
	User        string
	Password    string
	Host        string
	Name        string
	TablePrefix string
	DBFile      string
	Port        int
}
type log struct {
	Name         string
	Path         string
	Ext          string
	Level        string
	MaxMsgSize   int
	ArgumentType string
}
type rpc struct {
	Address string
}
type Resource struct {
	Directory string
	Tmp       string
}
type Task struct {
	Count int
}

var cfg *ini.File

const defaultConf = `
[System]
Mode = "auto"
HashIDSalt = {HashIDSalt}
[Server]
Address = "0.0.0.0:8888"
[Rpc]
Address = "localhost:10051"
[Resource]
Directory = "c:/zoolon"
Tmp = "./tmp"
[Task]
Count = 1
`

func Init(path string) error {
	var err error
	uuid2, err := uuid.NewUUID()
	if err != nil {
		return err
	}
	if path == "" || !zutil.IsExist(path) {
		confContent := util.Replace(map[string]string{
			"{HashIDSalt}": uuid2.String(),
		}, defaultConf)
		f, err := zutil.CreatNestedFile(path)
		if err != nil {
			panic("无法创建配置文件," + err.Error())
		}
		if _, err = f.WriteString(confContent); err != nil {
			panic("无法配置文件")
		}
		f.Close()
	}
	cfg, err = ini.Load(path)
	if err != nil {
		return errors.New("无法解析配置文件:" + path + " : " + err.Error())
	}
	sections := map[string]interface{}{
		"Database": DatabaseConfig,
		"System":   SystemConfig,
		"Rpc":      RpcConfig,
		"Resource": ResourceConfig,
		"Server":   ServerConfig,
		"Task":     TaskConfig,
	}
	for sectionName, sectionStruct := range sections {
		err = mapSection(sectionName, sectionStruct)
		if err != nil {
			return errors.New("配置文件" + sectionName + ",解析失败:" + err.Error())
		}
	}
	return nil
}

// mapSection 将配置文件的 Section 映射到结构体上
func mapSection(section string, confStruct interface{}) error {
	err := cfg.Section(section).MapTo(confStruct)
	if err != nil {
		return err
	}

	// 验证合法性
	validate := validator.New()
	err = validate.Struct(confStruct)
	if err != nil {
		return err
	}

	return nil
}
