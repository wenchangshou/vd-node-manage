// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LayoutManageClient is the client API for LayoutManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LayoutManageClient interface {
	OpenMultiScreen(ctx context.Context, in *OpenMultiScreenRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	CloseMultiScreen(ctx context.Context, in *CloseMultiScreenRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
}

type layoutManageClient struct {
	cc grpc.ClientConnInterface
}

func NewLayoutManageClient(cc grpc.ClientConnInterface) LayoutManageClient {
	return &layoutManageClient{cc}
}

func (c *layoutManageClient) OpenMultiScreen(ctx context.Context, in *OpenMultiScreenRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, "/LayoutManage/OpenMultiScreen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *layoutManageClient) CloseMultiScreen(ctx context.Context, in *CloseMultiScreenRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, "/LayoutManage/CloseMultiScreen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LayoutManageServer is the server API for LayoutManage service.
// All implementations must embed UnimplementedLayoutManageServer
// for forward compatibility
type LayoutManageServer interface {
	OpenMultiScreen(context.Context, *OpenMultiScreenRequest) (*wrapperspb.BoolValue, error)
	CloseMultiScreen(context.Context, *CloseMultiScreenRequest) (*wrapperspb.BoolValue, error)
	mustEmbedUnimplementedLayoutManageServer()
}

// UnimplementedLayoutManageServer must be embedded to have forward compatible implementations.
type UnimplementedLayoutManageServer struct {
}

func (UnimplementedLayoutManageServer) OpenMultiScreen(context.Context, *OpenMultiScreenRequest) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenMultiScreen not implemented")
}
func (UnimplementedLayoutManageServer) CloseMultiScreen(context.Context, *CloseMultiScreenRequest) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseMultiScreen not implemented")
}
func (UnimplementedLayoutManageServer) mustEmbedUnimplementedLayoutManageServer() {}

// UnsafeLayoutManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LayoutManageServer will
// result in compilation errors.
type UnsafeLayoutManageServer interface {
	mustEmbedUnimplementedLayoutManageServer()
}

func RegisterLayoutManageServer(s grpc.ServiceRegistrar, srv LayoutManageServer) {
	s.RegisterService(&LayoutManage_ServiceDesc, srv)
}

func _LayoutManage_OpenMultiScreen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenMultiScreenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LayoutManageServer).OpenMultiScreen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LayoutManage/OpenMultiScreen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LayoutManageServer).OpenMultiScreen(ctx, req.(*OpenMultiScreenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LayoutManage_CloseMultiScreen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseMultiScreenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LayoutManageServer).CloseMultiScreen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LayoutManage/CloseMultiScreen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LayoutManageServer).CloseMultiScreen(ctx, req.(*CloseMultiScreenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LayoutManage_ServiceDesc is the grpc.ServiceDesc for LayoutManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LayoutManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "LayoutManage",
	HandlerType: (*LayoutManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OpenMultiScreen",
			Handler:    _LayoutManage_OpenMultiScreen_Handler,
		},
		{
			MethodName: "CloseMultiScreen",
			Handler:    _LayoutManage_CloseMultiScreen_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/pb/layout.proto",
}
